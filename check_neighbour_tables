#!/usr/bin/env python
#
# Copyright (c) 2014 Catalyst.net Ltd
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

"""
Compare the number of entries in the ARP and NDISC caches to the maximum number permitted by the garbage collector. Return warning and critical states for nagios at configurable thresholds.

Michael Fincham <michael.fincham@catalyst.net.nz>.
"""

import argparse
import sys

IPV4_GC_THRESH3 = "/proc/sys/net/ipv4/neigh/default/gc_thresh3"
IPV6_GC_THRESH3 = "/proc/sys/net/ipv4/neigh/default/gc_thresh3"

IPV6_STATS = "/proc/net/stat/ndisc_cache"
IPV4_STATS = "/proc/net/stat/arp_cache"

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3

def read_file_lines(path, number_of_lines):
    """Read a number of lines from a file"""
    lines = []

    with open(path, 'r') as fp:
        for i in range (0, number_of_lines):
            lines.append(fp.readline())

    return lines

def read_file_integer(path):
    """Read an integer from a file"""
    with open(path, 'r') as fp:
        return int(fp.read())

def hex_column_to_int(line, column):
    """
    Given a string of hexademical columns as `line', return an integer
    representing the requested `column'.

    For instance:

    >>> hex_column_to_int('00000029  00000012 0000003b', 0)
    41
    """

    return int(line.split()[column], 16)

def check_neighbour_tables(warning, critical):
    """Compare the number of connections tracked by conntrack against the
    maximum number and return a tuple of (description, return_code)"""

    warning = int(warning)
    critical = int(critical)

    if warning > 100 or warning < 0:
        return("error: invalid threshold specified for warning", NAGIOS_UNKNOWN)

    if critical > 100 or critical < 0:
        return("error: invalid threshold specified for critical", NAGIOS_UNKNOWN)

    try:
        ipv4_lines = read_file_lines(IPV4_STATS, 2)
        ipv6_lines = read_file_lines(IPV6_STATS, 2)
    except:
        return("error: unable to read stats from /proc/net/stat", NAGIOS_UNKNOWN)


    ipv4_entries = hex_column_to_int(ipv4_lines[-1], 0)
    ipv6_entries = hex_column_to_int(ipv6_lines[-1], 0)

    try:
        ipv4_limit = read_file_integer(IPV4_GC_THRESH3)
        ipv6_limit = read_file_integer(IPV6_GC_THRESH3)
    except:
        return("error: unable to read gc_thresh3 values", NAGIOS_UNKNOWN)

    ipv4_consumed_percentage = int((ipv4_entries + 0.0) / ipv4_limit * 100)
    ipv6_consumed_percentage = int((ipv6_entries + 0.0) / ipv6_limit * 100)

    result = []
    result_code = NAGIOS_OK

    for quantity in ((ipv4_consumed_percentage, ipv4_entries, 'ARP entries'), (ipv6_consumed_percentage, ipv6_entries, 'NDISC entries')):

        result.append("%i %s (%i%%)" % (quantity[1], quantity[2], quantity[0]))

        if quantity[0] > critical:
            result_code = NAGIOS_CRITICAL

        if quantity[0] > warning and quantity[0] < critical:
            result_code = NAGIOS_WARNING

    result_string = ', '.join(result)

    return(result_string, result_code)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--warning', metavar="PERCENT", type=int, default="50", help='percentage threshold for warning state, defaults to 50')
    parser.add_argument('--critical', metavar="PERCENT", type=int, default="75", help='percentage threshold for critical state, defaults to 75')
    args = parser.parse_args()

    description, return_code = check_neighbour_tables(args.warning, args.critical)

    sys.stdout.write("%s\n" % description)
    sys.exit(return_code)
