#!/usr/bin/env python
#
# Copyright (c) 2014 Catalyst.net Ltd
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

"""
Compare the number of entries in the netfilter conntrack table to the maximum number permitted. Return warning and critical states for nagios at configurable thresholds.

Michael Fincham <michael.fincham@catalyst.net.nz>.
"""

import argparse
import sys

NF_CONNTRACK_MAX = "/proc/sys/net/netfilter/nf_conntrack_max"
NF_CONNTRACK_COUNT = "/proc/sys/net/netfilter/nf_conntrack_count"

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3

def read_file_integer(path):
    """Read an integer from a file"""
    return int(open(path).read())

def check_conntrack(warning, critical):
    """Compare the number of connections tracked by conntrack against the
    maximum number and return a tuple of (description, return_code)"""

    warning = int(warning)
    critical = int(critical)

    if warning > 100 or warning < 0:
        return("error: invalid threshold specified for warning", NAGIOS_UNKNOWN)

    if critical > 100 or critical < 0:
        return("error: invalid threshold specified for critical", NAGIOS_UNKNOWN)

    try:
        conntrack_count = read_file_integer(NF_CONNTRACK_COUNT)
    except:
        return("error: could not read count from %s" % NF_CONNTRACK_COUNT, NAGIOS_UNKNOWN)

    try:
        conntrack_max = read_file_integer(NF_CONNTRACK_MAX)
    except:
        return("error: could not read maximum from %s" % NF_CONNTRACK_MAX, NAGIOS_UNKNOWN)

    conntrack_consumed_percentage = int((conntrack_count + 0.0) / conntrack_max * 100)

    if  conntrack_consumed_percentage > critical:
        return("%i connections (%i%%) exceeds critical threshold" % (conntrack_count, conntrack_consumed_percentage), NAGIOS_CRITICAL)

    if conntrack_consumed_percentage > warning:
        return("%i connections (%i%%) exceeds warning threshold" % (conntrack_count, conntrack_consumed_percentage), NAGIOS_WARNING)

    return("%i connections (%i%%)" % (conntrack_count, conntrack_consumed_percentage), NAGIOS_OK)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--warning', metavar="PERCENT", type=int, default="50", help='percentage threshold for warning state, defaults to 50')
    parser.add_argument('--critical', metavar="PERCENT", type=int, default="75", help='percentage threshold for critical state, defaults to 75')
    args = parser.parse_args()

    description, return_code = check_conntrack(args.warning, args.critical)

    sys.stdout.write("%s\n" % description)
    sys.exit(return_code)
